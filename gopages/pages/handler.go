//Generated by gopages, do not edit
//This file will be overwritten during build

package pages

import(
	"fmt"
	"os"
	"mime"
	"path"
	"strings"
	"http"

)
func Run(address string) (err os.Error){
						println("gopages serving on", address)
						err = http.ListenAndServe(address, nil)
						return
}
func RenderGoPagesForbidden(conn http.ResponseWriter, request *http.Request){
			conn.WriteHeader(403)
			conn.Write([]byte("<h1>403 Forbidden</h1>"))
}
func init(){
	fmt.Println("Selog filekkkk")
	http.Handle("/index", http.HandlerFunc(Render))
	http.Handle("/index.ghtml", http.HandlerFunc(RenderGoPagesForbidden))

	http.Handle("/", http.HandlerFunc(func(conn http.ResponseWriter, request *http.Request){
		if request.URL.Path == "/"{
			defaultPage := "index"
			if strings.TrimSpace(defaultPage) != ""{
				http.Redirect(conn, defaultPage, 307)
			}
			return
		}
		val := "src" + request.URL.Path
		input,err := os.OpenFile(val, os.O_RDONLY, 0666)
//		input,err := os.Open(val)
		if err!=nil{
				conn.WriteHeader(404)
				conn.Write([]byte("<h1>404 Not Found</h1>"))
				return
		}
		s, _ := input.Stat()
		conn.Header.Set("Content-Length", fmt.Sprintf("%d(MISSING)", s.Size))
	//	conn.SetHeader("Content-Type", mime.TypeByExtension(strings.ToLower(path.Ext(val))))
		fmt.Sprintf("%d(MISSING)", s.Size)
		mime.TypeByExtension(strings.ToLower(path.Ext(val)))

		conn.WriteHeader(200)
		http.ServeFile(conn, request, val)
	}))
	http.Handle("/src", http.HandlerFunc(RenderGoPagesForbidden))
	http.Handle("/pages", http.HandlerFunc(RenderGoPagesForbidden))


}
